<?php

namespace JCLE\MemoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use JCLE\UserBundle\Entity\User;

/**
 * NoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteRepository extends EntityRepository
{   
    public function recherche ( $recherche, $username)
    {
            $qb = $this->createQueryBuilder('n');
//            $qb->select('n')
//                ->from('JCLEMemoBundle:Note', 'n');
          
            $qb = $this->requeteDeRecherche($recherche, $username, $qb);
            
//            $qb->setFirstResult(($page-1)* $maxParPage)
//                ->setMaxResults($maxParPage);
        
        return new Paginator($qb);
//        return $qb->getQuery()->getResult();
    }
    
//    public function countRecherche ( $recherche, $username )
//    {
//            $qb = $this->_em->createQueryBuilder();
//           $qb->select('COUNT (n.id)')
//            ->from('JCLEMemoBundle:Note', 'n');
//           
//           $qb = $this->requeteDeRecherche($recherche, $username, $qb);
//        
//        return $qb->getQuery()->getSingleScalarResult();
//    }
    
    public function requeteDeRecherche ($recherche, $username, $qb)
    {
        // TODO : Correction de la recherche ajax, ne fonctionne pas comme je le veux
        foreach ($recherche as $key => $value )
            {
                // TODO : factoriser cette condition en regardant dans mes cours AFPA pour la recupération des noms de méthodes que julien m'a montré
                if($key == 0) // premiere entrée du tableau
                { $qb->where($qb->expr()->like('n.titre', ':recherche'.$key)); }
                else // autres entrées du tableau
                { $qb->orWhere($qb->expr()->like('n.titre', ':recherche'.$key)); }
                
                $qb->orWhere($qb->expr()->like('n.tag', ':recherche'.$key))
                   ->orWhere($qb->expr()->like('n.description', ':recherche'.$key))
                   ->orWhere($qb->expr()->like('i.alt', ':recherche'.$key))
                    ->setParameter('recherche'.$key, '%'.$recherche[$key].'%' );
                // la key me sers à identifier le mot a substituer ex :     :recherche1 va recevoir la valeur du 1er element et ainsi de suite
            }
            $qb->andWhere('n.createur = :username')
                ->setParameter('username', $username )
                ->Join('n.icon','i');
//                ->setFirstResult(($page-1)* $max_result)
//                ->setMaxResults($max_result)
            return $qb;
    }
    
    /**
     * Rechercher les icones comprenant des notes pour un utilisateur spécifié, utilisé par le carousel
     * @param type $user
     * @return array
     */
    public function findIconsHaveNotes(User $user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('DISTINCT i.alt, i.id')
//            ->from('JCLEMemoBundle:Note', 'n')
            ->Join('n.icon','i')
            ->where('n.createur = :username')
            ->setParameter('username', $user );
        
        return $qb->getQuery()
                ->getArrayResult();
    }
    
    /**
     * Rechercher toutes les icones d'un utilisateur spécifié, utilisé par le formulaire de creation de notes
     * @param type $user
     * @return array
     */
    public function findNotesFromUser(User $user)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('DISTINCT n, i')
            ->where('n.createur = :username')
            ->Join('n.icon','i')
            ->setParameter('username', $user );
        
        return $qb->getQuery()
                ->getArrayResult();
    }
    
    public function findByIcon($iconAlt, $username)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n, i')
//                ->from('JCLEMemoBundle:Note', 'n')
                    ->Join('n.icon','i')
                    ->Join('n.createur','u')
                    ->where('i.alt = :altIcon')
                    ->setParameter('altIcon', $iconAlt )
                    ->andWhere('u.username = :username')           
                    ->setParameter('username', $username );
        
//        $qb->setFirstResult(($page-1)* $maxParPage)
//                ->setMaxResults($maxParPage);
        
//        return new Paginator($qb);
        return $qb->getQuery()->getArrayResult();
    }
    
    public function countIcon ($iconAlt, $username)
    {
        $qb= $this->createQueryBuilder('id')
            ->select('COUNT(DISTINCT n.id)')
//                ->from('JCLEMemoBundle:Note', 'n')
                    ->Join('n.icon','i')
                    ->Join('n.createur','u')
                    ->where('i.alt = :altIcon')
                    ->setParameter('altIcon', $iconAlt )
                    ->andWhere('u.username = :username')           
                    ->setParameter('username', $username );

        return $qb->getQuery()
                  ->getSingleScalarResult();  
    }
    
    public function requeteDeIcon ($iconAlt, $username, $qb)
    {
        return   $qb->Join('n.icon','i')
                    ->Join('n.createur','u')
                    ->where('i.alt = :altIcon')
                    ->setParameter('altIcon', $iconAlt )
                    ->andWhere('u.username = :username')           
                    ->setParameter('username', $username );
    }
    
}
